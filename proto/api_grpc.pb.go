// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HopperClient is the client API for Hopper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HopperClient interface {
	Trace(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Packet, error)
}

type hopperClient struct {
	cc grpc.ClientConnInterface
}

func NewHopperClient(cc grpc.ClientConnInterface) HopperClient {
	return &hopperClient{cc}
}

func (c *hopperClient) Trace(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Packet, error) {
	out := new(Packet)
	err := c.cc.Invoke(ctx, "/ctxms.api.Hopper/Trace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HopperServer is the server API for Hopper service.
// All implementations must embed UnimplementedHopperServer
// for forward compatibility
type HopperServer interface {
	Trace(context.Context, *Packet) (*Packet, error)
	mustEmbedUnimplementedHopperServer()
}

// UnimplementedHopperServer must be embedded to have forward compatible implementations.
type UnimplementedHopperServer struct {
}

func (UnimplementedHopperServer) Trace(context.Context, *Packet) (*Packet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trace not implemented")
}
func (UnimplementedHopperServer) mustEmbedUnimplementedHopperServer() {}

// UnsafeHopperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HopperServer will
// result in compilation errors.
type UnsafeHopperServer interface {
	mustEmbedUnimplementedHopperServer()
}

func RegisterHopperServer(s grpc.ServiceRegistrar, srv HopperServer) {
	s.RegisterService(&_Hopper_serviceDesc, srv)
}

func _Hopper_Trace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HopperServer).Trace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctxms.api.Hopper/Trace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HopperServer).Trace(ctx, req.(*Packet))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hopper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ctxms.api.Hopper",
	HandlerType: (*HopperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trace",
			Handler:    _Hopper_Trace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
